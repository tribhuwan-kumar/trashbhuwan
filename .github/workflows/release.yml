name: Build and Release

on:
  workflow_dispatch: # only manual triggering
    inputs:
      tag_name:
        description: 'Tag name for the release'
        required: false
        default: ''
      release_name:
        description: 'Release name for the release'
        required: false
        default: ''

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          echo "OS=${{ matrix.platform }}" >> $GITHUB_ENV

      - name: Set up GCC (Linux)
        if: matrix.platform == 'linux'
        uses: egor-tensin/setup-gcc@v1
        with:
          version: latest
          platform: x64

      - name: Set up MinGW (Windows)
        if: matrix.platform == 'windows'
        run: |
          # Install Chocolatey if not already installed
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          choco install mingw --yes --force
          Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1

      - name: Build with Makefile
        run: |
          make clean
          make all

      - name: Archive binary
        shell: bash
        run: |
          mkdir -p dist
          if [ "${{ matrix.platform }}" == "linux" ]; then
            cp trashbhuwan dist/trashbhuwan-linux
          else
            cp trashbhuwan.exe dist/trashbhuwan-windows.exe
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-binary
          path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set dynamic tag and release name
        id: set_release_info
        run: |
          # Set default tag and release name if not provided
          TAG_NAME="${{ github.event.inputs.tag_name }}"
          RELEASE_NAME="${{ github.event.inputs.release_name }}"
          if [ -z "$TAG_NAME" ]; then
            TAG_NAME="v$(date +'%Y.%m.%d')"
          fi
          if [ -z "$RELEASE_NAME" ]; then
            RELEASE_NAME="Release $(date +'%Y-%m-%d')"
          fi
          echo "tag_name=$TAG_NAME" >> $GITHUB_ENV
          echo "release_name=$RELEASE_NAME" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.tag_name }}
          release_name: ${{ env.release_name }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/
          asset_name: ${{ matrix.platform }}-binary
          asset_content_type: application/octet-stream
