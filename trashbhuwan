#!/usr/bin/env bash
#<------------------------------CLI Application for managing TRASH------------------------------------>
# author : @tribhuwan-kumar
# email : freakybytes@duck.com
#<------------------------------------------------------------------------------------------>

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m'

# Enable dotglob
shopt -s dotglob

TRASH_FILES_DIR="$HOME/.local/share/Trash/files"
TRASH_INFO_DIR="$HOME/.local/share/Trash/info"
TOTAL_SIZE=$(du -sh "$TRASH_FILES_DIR" | cut -f1)

# consider file name is a file & a directory too
SIZE_WIDTH=8
DIR_WIDTH=0

# Dynamic formatting
formatting() {
    local FILESIZE="$1"
    local PATHS="$2"
    local FILENAME="$3"
    printf "%-${SIZE_WIDTH}s %-${DIR_WIDTH}s %-s\n" "$FILESIZE" "$PATHS" "$FILENAME"
}

for ITEM in "$TRASH_FILES_DIR"/*; do
    FILENAME=$(basename "$ITEM")
    TRASH_INFO_FILE=$(find "$TRASH_INFO_DIR" -name "*$FILENAME.trashinfo*")
    if [ -n "$TRASH_INFO_FILE" ]; then
        ORIGINAL_PATH=$(grep "Path=" "$TRASH_INFO_FILE" | sed 's/Path=//' | xargs -I {} sh -c 'python3 -c "import urllib.parse; print(urllib.parse.unquote(\"{}\"))"')
        ORIGINAL_DIR=$(dirname "$ORIGINAL_PATH")
        [ ${#ORIGINAL_DIR} -gt $DIR_WIDTH ] && DIR_WIDTH=${#ORIGINAL_DIR}
    fi
done

ask_confirmation() {
    read -p "Are you sure you want to empty the trash? This action can't be undone. [y/N] " RESPONSE
    case "$RESPONSE" in
        [yY][eE][sS]|[yY]) 
            return 0
            ;;
        *)
            echo "Operation cancelled!!"
            exit 1
            ;;
    esac
}

create_trashinfo() {
    local FILE_PATH="$1"
    local TRASHINFO_PATH="$TRASH_INFO_DIR/$(basename "$FILE_PATH").trashinfo"
    local CURRENT_TIME=$(date +%Y-%m-%dT%H:%M:%S)
    local ORIGINAL_PATH=$(python3 -c "import urllib.parse; print(urllib.parse.quote('$FILE_PATH'))")

    echo "[Trash Info]" > "$TRASHINFO_PATH"
    echo "Path=$ORIGINAL_PATH" >> "$TRASHINFO_PATH"
    echo "DeletionDate=$CURRENT_TIME" >> "$TRASHINFO_PATH"
}

# Manage relative paths
get_absolute_path() {
    local REL_PATH="$1"
    if [[ "$REL_PATH" == /* ]]; then
        echo "$REL_PATH"
    else
        echo "$(pwd)/$REL_PATH"
    fi
}

# Help
if [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]] || [[ "$1" == "trashbhuwan" ]]; then
echo "Usage: trashbhuwan [FLAG] [FILE]...
Trashing & Restoring files

Example: trashbhuwan --put [FILE] [DIRECTORY]
Puts file and directory in trash

Avaiable flags:
    -p,  --put          Put files & directories in trash
    -r,  --restore      Restore files & directories from the trash
    -s,  --show         Preview trahsed files
    -ls, --list         List trashed files & directories along with disk usage
    -dl, --delete       Delete trashed files & directories
    -em, --empty        Empty the trash"
    exit 0
fi

# DU trash
let DIR_WIDTH+=8
if [[ "$1" == "--list" ]] || [[ "$1" == "-ls" ]]; then
    printf "${YELLOW}%-${SIZE_WIDTH}s${NC} ${YELLOW}%-${DIR_WIDTH}s${NC} ${YELLOW}%-s${NC}\n" "SIZE" "DELETED FROM" "FILES & DIRS"
    if [ -z "$(ls -A "$TRASH_FILES_DIR")" ]; then
        echo -e "\nTrash is empty!!\n"
    else
        for ITEM in "$TRASH_FILES_DIR"/*; do
            FILENAME=$(basename "$ITEM")
            TRASH_INFO_FILE=$(find "$TRASH_INFO_DIR" -name "*$FILENAME.trashinfo*")
            if [ -n "$TRASH_INFO_FILE" ]; then
                ORIGINAL_PATH=$(grep "Path=" "$TRASH_INFO_FILE" | sed 's/Path=//' | xargs -I {} sh -c 'python3 -c "import urllib.parse; print(urllib.parse.unquote(\"{}\"))"')
                ORIGINAL_DIR=$(dirname "$ORIGINAL_PATH")
                SIZE=$(du -sh "$ITEM" | cut -f1)
                formatting "$SIZE" "$ORIGINAL_DIR" "$FILENAME"
            fi
        done
    fi
    printf "${YELLOW}%-${SIZE_WIDTH}s${NC} ${YELLOW}%-${DIR_WIDTH}s${NC} ${YELLOW}%-s${NC}\n" "$TOTAL_SIZE" "TOTAL SIZE" "-----------------"
    exit 0
fi

# Delete trashed files
if [[ "$1" == "--delete" ]] || [[ "$1" == "-dl" ]]; then
    for FILE_NAME in "${@:2}"; do
        if [ -e "$TRASH_FILES_DIR/$FILE_NAME" ]; then
            ESCAPED_FILE_NAME=$(printf '%q' "$FILE_NAME")
            TRASH_INFO_FILE=$(find "$TRASH_INFO_DIR" -name "*$ESCAPED_FILE_NAME.trashinfo*")
            if [ -n "$TRASH_INFO_FILE" ]; then
                rm -rf "${TRASH_FILES_DIR:?}/${FILE_NAME:?}"
                rm -rf "${TRASH_INFO_FILE:?}"
                wait $!
                printf "${GREEN}%s${NC} %s\\n" "$FILE_NAME" "is deleted from trash!"
            else
                printf "%s ${RED}%s${NC}\\n" "Couldn't find .trashinfo file for" "$FILE_NAME"
            fi
        else
            printf "${RED}%s${NC} %s\\n" "$FILE_NAME" "is not found in the trash!"
        fi
    done
    exit 0
fi

# Empty trash
if [[ "$1" == "--empty" ]] || [[ "$1" == "-em" ]]; then
    if [ -z "$(ls -A "$TRASH_FILES_DIR")" ]; then
        printf "${GREEN}%s${NC}\\n" "Trash is already empty!!"
        exit 0
    else
        ask_confirmation
        rm -rf "${TRASH_FILES_DIR:?}"/*
        rm -rf "${TRASH_INFO_DIR:?}"/*
        wait $!
        printf "${GREEN}%s${NC}\\n" "Trash has been emptied!!"
        exit 0
    fi
fi

# Put files in trash
if [[ "$1" == "--put" ]] || [[ "$1" == "-p" ]]; then
    for FILE_NAME in "${@:2}"; do
        FILE_PATH=$(get_absolute_path "$FILE_NAME") 
        if [ -e "$FILE_PATH" ]; then 
            mv "$FILE_NAME" "$TRASH_FILES_DIR"
            create_trashinfo "$FILE_PATH"
            printf "${GREEN}%s${NC} %s\\n" "$FILE_NAME" "is trashed!!"
        else
            printf "${RED}%s${NC} %s\\n" "$FILE_NAME" "does not exist!!"
        fi
    done
    exit 0
fi

# Restoration of files
if [[ "$1" == "--restore" ]] || [[ "$1" == "-r" ]]; then
    for FILE_NAME in "${@:2}"; do
        if [ -e "$TRASH_FILES_DIR/$FILE_NAME" ]; then
            ESCAPED_FILE_NAME=$(printf '%q' "$FILE_NAME")
            TRASH_INFO_FILE=$(find "$TRASH_INFO_DIR" -name "*$ESCAPED_FILE_NAME.trashinfo*")
            if [ -n "$TRASH_INFO_FILE" ]; then 
                ORIGINAL_PATH=$(grep "Path=" "$TRASH_INFO_FILE" | sed 's/Path=//' | xargs -I {} sh -c 'python3 -c "import urllib.parse; print(urllib.parse.unquote(\"{}\"))"')
                DIRECTORY=$(dirname "$ORIGINAL_PATH")
                if [ -n "$ORIGINAL_PATH" ]; then
                    if [ ! -d "$DIRECTORY" ]; then
                        mkdir "$DIRECTORY"
                    fi
                    mv "$TRASH_FILES_DIR/$FILE_NAME" "$ORIGINAL_PATH"
                    printf "%s ${GREEN}%s${NC} %s ${GREEN}%s${NC}\\n" "Restored" "$FILE_NAME" "to" "$DIRECTORY"  
                else
                    printf "%s ${RED}%s${NC}\\n" "Couldn't find original path for" "$FILE_NAME"  
                fi
            else
                printf "%s ${RED}%s${NC}\\n" "Couldn't find original path for" "$FILE_NAME"   
            fi
        else
            printf "%s ${RED}%s${NC} %s\\n" "Couldn't find" "$FILE_NAME" "in trash"
        fi
    done
fi

# Show trahsed files
if [[ "$1" == "--show" ]] || [[ "$1" == "-s" ]]; then
    for FILE_NAME in "${@:2}"; do
        if [ -e "$TRASH_FILES_DIR/$FILE_NAME" ]; then
            ESCAPED_FILE_NAME=$(printf '%q' "$FILE_NAME")
            TRASH_FILE_PATH=$(find "$TRASH_FILES_DIR" -name "*$ESCAPED_FILE_NAME*")
            if [ -n "$TRASH_FILE_PATH" ]; then 
                if [ ! -f "$TRASH_FILE_PATH" ]; then
                    printf "${RED}%s${NC} %s\\n" "$FILE_NAME" "is a directory or it doesn't exit in trash!!"
                    exit 0
                fi
                FILE_NAME=$(basename "$TRASH_FILE_PATH")
                FILE_EXT=${FILE_NAME##*.}
                if [[ "$FILE_EXT" =~ ^(jpg|jpeg|png|gif|bmp|tiff|webp)$ ]]; then
                    feh -P "$TRASH_FILE_PATH"
                elif [[ "$FILE_EXT" =~ ^(mp4|mkv|mov|avi|wmv|webm)$ ]]; then
                    mpv --msg-level=all=no "$TRASH_FILE_PATH"
                else
                    bat "$TRASH_FILE_PATH"
                fi
            fi
        fi
    done
fi

# Disable dotglob
shopt -u dotglob

# Check for the arguments
if [ $# -eq 0 ]; then
    printf "${RED}%s${NC}\\n" "ó°‹¼ No arguments were provided, See the github page https://github.com/tribhuwan-kumar/trashbhuwan for usage."
    exit 1
fi

if [[ "$1" != "--list" && "$1" != "-ls" && "$1" != "--empty" && "$1" != "-em" && "$1" != "--put" && "$1" != "-p" && "$1" != "--restore" && "$1" != "-r" && "$1" != "--delete" && "$1" != "-dl" && "$1" != "--show" && "$1" != "-s" ]]; then
    printf "${RED}%s${NC}\\n" "Invalid option: $1"
    echo "Usage: [--list|-ls] [--put|-p] [--restore|-r] [--delete|-dl] [--empty|-em] [FILE]...[DIRECTORY]"
    exit 1
fi
